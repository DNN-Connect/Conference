/******* TABLES *******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Attendees') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Conference_Attendees(
 [ConferenceId] [int] NOT NULL,
 [UserId] [int] NOT NULL,
 [Status] [int] NOT NULL,
 [ReceiveNotifications] [bit] NOT NULL,
 [CreatedByUserID] [int] NOT NULL,
 [CreatedOnDate] [datetime] NOT NULL,
 [LastModifiedByUserID] [int] NOT NULL,
 [LastModifiedOnDate] [datetime] NOT NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Conference_Attendees PRIMARY KEY CLUSTERED 
(
 [ConferenceId] ASC,
 [UserId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Comments') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Conference_Comments(
 [CommentId] [int] IDENTITY(1,1) NOT NULL,
 [UserId] [int] NOT NULL,
 [ConferenceId] [int] NOT NULL,
 [SessionId] [int] NOT NULL,
 [Datime] [datetime] NOT NULL,
 [Remarks] [nvarchar](max) NOT NULL,
 [Visibility] [int] NOT NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Conference_Comments PRIMARY KEY CLUSTERED 
(
 [CommentId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Conferences') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Conference_Conferences(
 [ConferenceId] [int] IDENTITY(1,1) NOT NULL,
 [PortalId] [int] NOT NULL,
 [Name] [nvarchar](150) NOT NULL,
 [Description] [nvarchar](max) NULL,
 [StartDate] [datetime] NULL,
 [EndDate] [datetime] NULL,
 [MaxCapacity] [int] NULL,
 [SessionVoting] [bit] NOT NULL,
 [AttendeeRole] [int] NOT NULL,
 [SpeakerRole] [int] NOT NULL,
 [CreatedByUserID] [int] NOT NULL,
 [CreatedOnDate] [datetime] NOT NULL,
 [LastModifiedByUserID] [int] NOT NULL,
 [LastModifiedOnDate] [datetime] NOT NULL,
 [Location] [nvarchar](1000) NULL,
 [Url] [nvarchar](300) NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Conference_Conferences PRIMARY KEY CLUSTERED 
(
 [ConferenceId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Locations') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Conference_Locations(
 [LocationId] [int] IDENTITY(1,1) NOT NULL,
 [ConferenceId] [int] NOT NULL,
 [Name] [nvarchar](150) NULL,
 [Description] [nvarchar](max) NULL,
 [Capacity] [int] NULL,
 [Sort] [int] NULL,
 [CreatedByUserID] [int] NOT NULL,
 [CreatedOnDate] [datetime] NOT NULL,
 [LastModifiedByUserID] [int] NOT NULL,
 [LastModifiedOnDate] [datetime] NOT NULL,
 [BackgroundColor] [nvarchar](10) NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Conference_Locations PRIMARY KEY CLUSTERED 
(
 [LocationId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionAttendees') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionAttendees(
 [SessionId] [int] NOT NULL,
 [UserId] [int] NOT NULL,
 [CreatedByUserID] [int] NOT NULL,
 [CreatedOnDate] [datetime] NOT NULL,
 [LastModifiedByUserID] [int] NOT NULL,
 [LastModifiedOnDate] [datetime] NOT NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Conference_SessionAttendees PRIMARY KEY CLUSTERED 
(
 [SessionId] ASC,
 [UserId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionResources') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionResources(
 [SessionResourceId] [int] IDENTITY(1,1) NOT NULL,
 [SessionId] [int] NOT NULL,
 [ResourceLink] [nvarchar](500) NOT NULL,
 [ResourceDescription] [nvarchar](1000) NULL,
 [ResourceType] [int] NOT NULL,
 [Visibility] [int] NOT NULL,
 [CreatedByUserID] [int] NOT NULL,
 [CreatedOnDate] [datetime] NOT NULL,
 [LastModifiedByUserID] [int] NOT NULL,
 [LastModifiedOnDate] [datetime] NOT NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Conference_SessionResources PRIMARY KEY CLUSTERED 
(
 [SessionResourceId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Sessions') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Conference_Sessions(
 [SessionId] [int] IDENTITY(1,1) NOT NULL,
 [ConferenceId] [int] NOT NULL,
 [LocationId] [int] NULL,
 [Level] [nvarchar](50) NULL,
 [Sort] [int] NULL,
 [CreatedByUserID] [int] NOT NULL,
 [CreatedOnDate] [datetime] NOT NULL,
 [LastModifiedByUserID] [int] NOT NULL,
 [LastModifiedOnDate] [datetime] NOT NULL,
 [Capacity] [int] NULL,
 [SlotId] [int] NOT NULL,
 [Title] [nvarchar](150) NULL,
 [SubTitle] [nvarchar](150) NULL,
 [Description] [nvarchar](max) NULL,
 [Status] [int] NULL,
 [IsPlenary] [bit] NOT NULL,
 [DayNr] [int] NOT NULL,
 [Notes] [nvarchar](max) NULL,
 [TrackId] [int] NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Conference_Sessions PRIMARY KEY CLUSTERED 
(
 [SessionId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionSpeakers') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionSpeakers(
 [SpeakerId] [int] NOT NULL,
 [SessionId] [int] NOT NULL,
 [CreatedByUserID] [int] NOT NULL,
 [CreatedOnDate] [datetime] NOT NULL,
 [LastModifiedByUserID] [int] NOT NULL,
 [LastModifiedOnDate] [datetime] NOT NULL,
 [Sort] [int] NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Conference_SessionSpeakers PRIMARY KEY CLUSTERED 
(
 [SpeakerId] ASC,
 [SessionId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionTags') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionTags(
 [SessionId] [int] NOT NULL,
 [TagId] [int] NOT NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Conference_SessionTags PRIMARY KEY CLUSTERED 
(
 [SessionId] ASC,
 [TagId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionVotes') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionVotes(
 [SessionId] [int] NOT NULL,
 [UserId] [int] NOT NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Conference_SessionVotes PRIMARY KEY CLUSTERED 
(
 [SessionId] ASC,
 [UserId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Slots') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Conference_Slots(
 [SlotId] [int] IDENTITY(1,1) NOT NULL,
 [ConferenceId] [int] NOT NULL,
 [Start] [time](0) NOT NULL,
 [DurationMins] [int] NOT NULL,
 [SlotType] [int] NOT NULL,
 [CreatedByUserID] [int] NOT NULL,
 [CreatedOnDate] [datetime] NOT NULL,
 [LastModifiedByUserID] [int] NOT NULL,
 [LastModifiedOnDate] [datetime] NOT NULL,
 [Title] [nvarchar](150) NULL,
 [Description] [nvarchar](max) NULL,
 [DayNr] [int] NULL,
 [LocationId] [int] NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Conference_Slots PRIMARY KEY CLUSTERED 
(
 [SlotId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Speakers') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Conference_Speakers(
 [ConferenceId] [int] NOT NULL,
 [UserId] [int] NOT NULL,
 [Company] [nvarchar](200) NULL,
 [Sort] [int] NULL,
 [CreatedByUserID] [int] NOT NULL,
 [CreatedOnDate] [datetime] NOT NULL,
 [LastModifiedByUserID] [int] NOT NULL,
 [LastModifiedOnDate] [datetime] NOT NULL,
 [Url] [nvarchar](200) NULL,
 [Description] [nvarchar](max) NULL,
 [DescriptionShort] [nvarchar](max) NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Conference_Speakers PRIMARY KEY CLUSTERED 
(
 [ConferenceId] ASC,
 [UserId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Tags') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Conference_Tags(
 [TagId] [int] IDENTITY(1,1) NOT NULL,
 [ConferenceId] [int] NOT NULL,
 [TagName] [nvarchar](100) NOT NULL,
 [CreatedByUserID] [int] NOT NULL,
 [CreatedOnDate] [datetime] NOT NULL,
 [LastModifiedByUserID] [int] NOT NULL,
 [LastModifiedOnDate] [datetime] NOT NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Conference_Tags PRIMARY KEY CLUSTERED 
(
 [TagId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_TagVotes') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Conference_TagVotes(
 [TagId] [int] NOT NULL,
 [UserId] [int] NOT NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Conference_TagVotes PRIMARY KEY CLUSTERED 
(
 [TagId] ASC,
 [UserId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Tracks') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Connect_Conference_Tracks(
 [TrackId] [int] IDENTITY(1,1) NOT NULL,
 [ConferenceId] [int] NOT NULL,
 [SessionVoting] [bit] NOT NULL,
 [BackgroundColor] [nvarchar](10) NULL,
 [CreatedByUserID] [int] NOT NULL,
 [CreatedOnDate] [datetime] NOT NULL,
 [LastModifiedByUserID] [int] NOT NULL,
 [LastModifiedOnDate] [datetime] NOT NULL,
 [Sort] [int] NULL,
 [Title] [nvarchar](150) NULL,
 [Description] [nvarchar](max) NULL,
 CONSTRAINT PK_{objectQualifier}Connect_Conference_Tracks PRIMARY KEY CLUSTERED 
(
 [TrackId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

/******* STRUCTURE *******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Attendees_Conferences') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Attendees'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Attendees  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_Attendees_Conferences FOREIGN KEY([ConferenceId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Conference_Conferences ([ConferenceId])
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Attendees_Conferences') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Attendees'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Attendees CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_Attendees_Conferences
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Attendees_Users') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Attendees'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Attendees  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_Attendees_Users FOREIGN KEY([UserId])
REFERENCES {databaseOwner}{objectQualifier}Users ([UserID])
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Attendees_Users') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Attendees'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Attendees CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_Attendees_Users
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Comments_Conferences') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Comments'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Comments  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_Comments_Conferences FOREIGN KEY([ConferenceId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Conference_Conferences ([ConferenceId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Comments_Conferences') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Comments'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Comments CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_Comments_Conferences
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Comments_Users') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Comments'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Comments  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_Comments_Users FOREIGN KEY([UserId])
REFERENCES {databaseOwner}{objectQualifier}Users ([UserID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Comments_Users') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Comments'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Comments CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_Comments_Users
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Conferences_Portals') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Conferences'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Conferences  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_Conferences_Portals FOREIGN KEY([PortalId])
REFERENCES {databaseOwner}{objectQualifier}Portals ([PortalID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Conferences_Portals') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Conferences'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Conferences CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_Conferences_Portals
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Locations_Conferences') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Locations'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Locations  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_Locations_Conferences FOREIGN KEY([ConferenceId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Conference_Conferences ([ConferenceId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Locations_Conferences') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Locations'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Locations CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_Locations_Conferences
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_SessionAttendees_Sessions') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionAttendees'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionAttendees  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_SessionAttendees_Sessions FOREIGN KEY([SessionId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Conference_Sessions ([SessionId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_SessionAttendees_Sessions') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionAttendees'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionAttendees CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_SessionAttendees_Sessions
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_SessionAttendees_Users') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionAttendees'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionAttendees  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_SessionAttendees_Users FOREIGN KEY([UserId])
REFERENCES {databaseOwner}{objectQualifier}Users ([UserID])
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_SessionAttendees_Users') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionAttendees'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionAttendees CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_SessionAttendees_Users
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_SessionResources_Sessions') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionResources'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionResources  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_SessionResources_Sessions FOREIGN KEY([SessionId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Conference_Sessions ([SessionId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_SessionResources_Sessions') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionResources'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionResources CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_SessionResources_Sessions
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Sessions_Conferences') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Sessions'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Sessions  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_Sessions_Conferences FOREIGN KEY([ConferenceId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Conference_Conferences ([ConferenceId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Sessions_Conferences') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Sessions'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Sessions CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_Sessions_Conferences
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_SessionSpeakers_Sessions') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionSpeakers'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionSpeakers  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_SessionSpeakers_Sessions FOREIGN KEY([SessionId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Conference_Sessions ([SessionId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_SessionSpeakers_Sessions') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionSpeakers'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionSpeakers CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_SessionSpeakers_Sessions
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_SessionSpeakers_Users') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionSpeakers'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionSpeakers  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_SessionSpeakers_Users FOREIGN KEY([SpeakerId])
REFERENCES {databaseOwner}{objectQualifier}Users ([UserID])
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_SessionSpeakers_Users') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionSpeakers'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionSpeakers CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_SessionSpeakers_Users
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_SessionTags_Sessions') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionTags'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionTags  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_SessionTags_Sessions FOREIGN KEY([SessionId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Conference_Sessions ([SessionId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_SessionTags_Sessions') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionTags'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionTags CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_SessionTags_Sessions
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_SessionVotes_Sessions') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionVotes'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionVotes  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_SessionVotes_Sessions FOREIGN KEY([SessionId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Conference_Sessions ([SessionId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_SessionVotes_Sessions') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionVotes'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionVotes CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_SessionVotes_Sessions
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_SessionVotes_Users') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionVotes'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionVotes  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_SessionVotes_Users FOREIGN KEY([UserId])
REFERENCES {databaseOwner}{objectQualifier}Users ([UserID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_SessionVotes_Users') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_SessionVotes'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_SessionVotes CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_SessionVotes_Users
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Slots_Conferences') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Slots'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Slots  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_Slots_Conferences FOREIGN KEY([ConferenceId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Conference_Conferences ([ConferenceId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Slots_Conferences') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Slots'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Slots CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_Slots_Conferences
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Speakers_Conferences') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Speakers'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Speakers  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_Speakers_Conferences FOREIGN KEY([ConferenceId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Conference_Conferences ([ConferenceId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Speakers_Conferences') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Speakers'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Speakers CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_Speakers_Conferences
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Speakers_Users') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Speakers'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Speakers  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_Speakers_Users FOREIGN KEY([UserId])
REFERENCES {databaseOwner}{objectQualifier}Users ([UserID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Speakers_Users') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Speakers'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Speakers CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_Speakers_Users
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Tags_Conferences') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Tags'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Tags  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_Tags_Conferences FOREIGN KEY([ConferenceId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Conference_Conferences ([ConferenceId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Tags_Conferences') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Tags'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Tags CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_Tags_Conferences
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_TagVotes_Tags') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_TagVotes'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_TagVotes  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_TagVotes_Tags FOREIGN KEY([TagId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Conference_Tags ([TagId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_TagVotes_Tags') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_TagVotes'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_TagVotes CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_TagVotes_Tags
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_TagVotes_Users') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_TagVotes'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_TagVotes  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_TagVotes_Users FOREIGN KEY([UserId])
REFERENCES {databaseOwner}{objectQualifier}Users ([UserID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_TagVotes_Users') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_TagVotes'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_TagVotes CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_TagVotes_Users
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Tracks_Conferences') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Tracks'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Tracks  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Connect_Conference_Tracks_Conferences FOREIGN KEY([ConferenceId])
REFERENCES {databaseOwner}{objectQualifier}Connect_Conference_Conferences ([ConferenceId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Connect_Conference_Tracks_Conferences') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Connect_Conference_Tracks'))
ALTER TABLE {databaseOwner}{objectQualifier}Connect_Conference_Tracks CHECK CONSTRAINT FK_{objectQualifier}Connect_Conference_Tracks_Conferences
GO

/******* TRIGGERS *******/
/******* VIEWS *******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Conference_Attendees'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Attendees
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Attendees
AS
SELECT
 a.*,
 u.DisplayName,
 u.FirstName,
 u.LastName,
 u.Email,
 u.Username,
 propPhoto.Visibility PhotoVisibility,
 propPhoto.[FileName] PhotoFilename,
 propPhoto.Folder PhotoFolder,
 propPhoto.Width PhotoWidth,
 propPhoto.Height PhotoHeight,
 propPhoto.ContentType PhotoContentType,
 propBio.PropertyValue Biography,
 propCompany.PropertyValue Company,
 uc.DisplayName CreatedByUser,
 um.DisplayName LastModifiedByUser
FROM {databaseOwner}{objectQualifier}Connect_Conference_Attendees a
 INNER JOIN {databaseOwner}{objectQualifier}Connect_Conference_Conferences c ON c.ConferenceId=a.ConferenceId
 INNER JOIN {databaseOwner}{objectQualifier}Users u ON u.UserID=a.UserId
LEFT JOIN (
SELECT
 ppd.PortalID propPortalId,
 up.UserID,
 up.Visibility,
 f.*
FROM {databaseOwner}{objectQualifier}UserProfile up
 INNER JOIN {databaseOwner}{objectQualifier}ProfilePropertyDefinition ppd ON ppd.PropertyDefinitionID=up.PropertyDefinitionID
 INNER JOIN {databaseOwner}{objectQualifier}Files f ON up.PropertyValue=f.FileId
WHERE ppd.PropertyName='Photo'
) propPhoto ON propPhoto.propPortalId=c.PortalId AND propPhoto.UserID=u.UserID
LEFT JOIN (
SELECT
 ppd.PortalID,
 up.*
FROM {databaseOwner}{objectQualifier}UserProfile up
 INNER JOIN {databaseOwner}{objectQualifier}ProfilePropertyDefinition ppd ON ppd.PropertyDefinitionID=up.PropertyDefinitionID
WHERE ppd.PropertyName='Biography'
) propBio ON propBio.PortalID=c.PortalId AND propBio.UserID=u.UserID
LEFT JOIN (
SELECT
 ppd.PortalID,
 up.*
FROM {databaseOwner}{objectQualifier}UserProfile up
 INNER JOIN {databaseOwner}{objectQualifier}ProfilePropertyDefinition ppd ON ppd.PropertyDefinitionID=up.PropertyDefinitionID
WHERE ppd.PropertyName='Company'
) propCompany ON propCompany.PortalID=c.PortalId AND propCompany.UserID=u.UserID
 LEFT JOIN {databaseOwner}{objectQualifier}Users uc ON uc.UserID=a.CreatedByUserID
 LEFT JOIN {databaseOwner}{objectQualifier}Users um ON um.UserID=a.LastModifiedByUserID
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Conference_Comments'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Comments
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Comments
AS
SELECT
 c.*,
 u.DisplayName,
 u.Email,
 u.FirstName,
 u.LastName,
 conf.Name ConferenceName,
 s.Title SessionTitle
FROM {databaseOwner}{objectQualifier}Connect_Conference_Comments c
 INNER JOIN {databaseOwner}{objectQualifier}Users u ON u.UserID=c.UserId
 INNER JOIN {databaseOwner}{objectQualifier}Connect_Conference_Conferences conf ON conf.ConferenceId=c.ConferenceId
 LEFT JOIN {databaseOwner}{objectQualifier}Connect_Conference_Sessions s ON s.SessionId=c.SessionId
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Conference_Conferences'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Conferences
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Conferences
AS
SELECT
 c.*,
 (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Connect_Conference_Attendees a WHERE a.ConferenceId=c.ConferenceId) NrAttendees,
 (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Connect_Conference_Speakers s WHERE s.ConferenceId=c.ConferenceId) NrSpeakers,
 (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Connect_Conference_Locations l WHERE l.ConferenceId=c.ConferenceId) NrLocations,
 (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Connect_Conference_Tracks t WHERE t.ConferenceId=c.ConferenceId) NrTracks,
 (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Connect_Conference_Sessions s WHERE s.ConferenceId=c.ConferenceId AND s.[Status] >= 3) NrSessions,
 uc.DisplayName CreatedByUser,
 um.DisplayName LastModifiedByUser
FROM {databaseOwner}{objectQualifier}Connect_Conference_Conferences c
 LEFT JOIN {databaseOwner}{objectQualifier}Users uc ON uc.UserID=c.CreatedByUserID
 LEFT JOIN {databaseOwner}{objectQualifier}Users um ON um.UserID=c.LastModifiedByUserID
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Conference_Locations'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Locations
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Locations
AS
SELECT
 l.*,
 uc.DisplayName CreatedByUser,
 um.DisplayName LastModifiedByUser
FROM {databaseOwner}{objectQualifier}Connect_Conference_Locations l
 LEFT JOIN {databaseOwner}{objectQualifier}Users uc ON uc.UserID=l.CreatedByUserID
 LEFT JOIN {databaseOwner}{objectQualifier}Users um ON um.UserID=l.LastModifiedByUserID
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Conference_SessionAttendees'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_SessionAttendees
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_SessionAttendees
AS
SELECT
 sa.*,
 s.Title,
 u.DisplayName SessionAttendeeName,
 uc.DisplayName CreatedByUser,
 um.DisplayName LastModifiedByUser
FROM {databaseOwner}{objectQualifier}Connect_Conference_SessionAttendees sa
 INNER JOIN {databaseOwner}{objectQualifier}Connect_Conference_Sessions s ON s.SessionId=sa.SessionId
 INNER JOIN {databaseOwner}{objectQualifier}Users u ON u.UserID=sa.UserId
 LEFT JOIN {databaseOwner}{objectQualifier}Users uc ON uc.UserID=sa.CreatedByUserID
 LEFT JOIN {databaseOwner}{objectQualifier}Users um ON um.UserID=sa.LastModifiedByUserID
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Conference_SessionResources'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_SessionResources
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_SessionResources
AS
SELECT
 sr.*,
 uc.DisplayName CreatedByUser,
 um.DisplayName LastModifiedByUser
FROM {databaseOwner}{objectQualifier}Connect_Conference_SessionResources sr
 LEFT JOIN {databaseOwner}{objectQualifier}Users uc ON uc.UserID=sr.CreatedByUserID
 LEFT JOIN {databaseOwner}{objectQualifier}Users um ON um.UserID=sr.LastModifiedByUserID
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Conference_Sessions'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Sessions
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Sessions
AS
SELECT
 s.*,
 DATEADD(DAY, s.DayNr, c.StartDate) + CAST(sl.Start AS DATETIME) SessionDateAndTime,
 l.Name LocationName,
 sl.Title SlotTitle,
 t.Title TrackTitle,
 t.BackgroundColor,
 (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Connect_Conference_SessionAttendees a WHERE a.SessionId=s.SessionId) NrAttendees,
 (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Connect_Conference_SessionSpeakers ss WHERE ss.SessionId=s.SessionId) NrSpeakers,
 (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Connect_Conference_SessionVotes sv WHERE sv.SessionId=s.SessionId) NrVotes,
 (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Connect_Conference_SessionResources sr WHERE sr.SessionId=s.SessionId AND sr.Visibility=1) NrResources,
 uc.DisplayName CreatedByUser,
 um.DisplayName LastModifiedByUser
FROM {databaseOwner}{objectQualifier}Connect_Conference_Sessions s
 INNER JOIN {databaseOwner}{objectQualifier}Connect_Conference_Conferences c ON c.ConferenceId=s.ConferenceId
 LEFT JOIN {databaseOwner}{objectQualifier}Connect_Conference_Locations l ON l.LocationId=s.LocationId
 LEFT JOIN {databaseOwner}{objectQualifier}Connect_Conference_Slots sl ON sl.SlotId=s.SlotId
 LEFT JOIN {databaseOwner}{objectQualifier}Connect_Conference_Tracks t ON t.TrackId=s.TrackId
 LEFT JOIN {databaseOwner}{objectQualifier}Users uc ON uc.UserID=s.CreatedByUserID
 LEFT JOIN {databaseOwner}{objectQualifier}Users um ON um.UserID=s.LastModifiedByUserID
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Conference_SessionSpeakers'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_SessionSpeakers
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_SessionSpeakers
AS
SELECT
 ss.*,
 sp.Company,
 sp.Description,
 sp.DescriptionShort,
 sp.Url,
 u.DisplayName,
 u.FirstName,
 u.LastName,
 u.Email,
 u.Username,
 uc.DisplayName CreatedByUser,
 um.DisplayName LastModifiedByUser
FROM {databaseOwner}{objectQualifier}Connect_Conference_SessionSpeakers ss
 INNER JOIN {databaseOwner}{objectQualifier}Connect_Conference_Sessions s ON s.SessionId=ss.SessionId
 INNER JOIN {databaseOwner}{objectQualifier}Connect_Conference_Speakers sp ON sp.UserId=ss.SpeakerId
 INNER JOIN {databaseOwner}{objectQualifier}Users u ON u.UserID=ss.SpeakerId
 LEFT JOIN {databaseOwner}{objectQualifier}Users uc ON uc.UserID=ss.CreatedByUserID
 LEFT JOIN {databaseOwner}{objectQualifier}Users um ON um.UserID=ss.LastModifiedByUserID
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Conference_SessionTags'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_SessionTags
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_SessionTags
AS
SELECT
 st.*,
 s.Title,
 t.TagName,
 t.ConferenceId
FROM {databaseOwner}{objectQualifier}Connect_Conference_SessionTags st
 INNER JOIN {databaseOwner}{objectQualifier}Connect_Conference_Sessions s ON s.SessionId=st.SessionId
 INNER JOIN {databaseOwner}{objectQualifier}Connect_Conference_Tags t ON t.TagId=st.TagId
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Conference_Slots'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Slots
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Slots
AS
SELECT
 sl.*,
 l.Name LocationName,
 uc.DisplayName CreatedByUser,
 um.DisplayName LastModifiedByUser
FROM {databaseOwner}{objectQualifier}Connect_Conference_Slots sl
 LEFT JOIN {databaseOwner}{objectQualifier}Connect_Conference_Locations l ON l.LocationId=sl.LocationId
 LEFT JOIN {databaseOwner}{objectQualifier}Users uc ON uc.UserID=sl.CreatedByUserID
 LEFT JOIN {databaseOwner}{objectQualifier}Users um ON um.UserID=sl.LastModifiedByUserID
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Conference_Speakers'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Speakers
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Speakers
AS
SELECT
 s.*,
 u.DisplayName,
 u.FirstName,
 u.LastName,
 u.Email,
 u.Username,
 propPhoto.Visibility PhotoVisibility,
 propPhoto.[FileName] PhotoFilename,
 propPhoto.Folder PhotoFolder,
 propPhoto.Width PhotoWidth,
 propPhoto.Height PhotoHeight,
 propPhoto.ContentType PhotoContentType,
 propBio.PropertyValue Biography,
 uc.DisplayName CreatedByUser,
 um.DisplayName LastModifiedByUser
FROM {databaseOwner}{objectQualifier}Connect_Conference_Speakers s
 INNER JOIN {databaseOwner}{objectQualifier}Connect_Conference_Conferences c ON c.ConferenceId=s.ConferenceId
 INNER JOIN {databaseOwner}{objectQualifier}Users u ON u.UserID=s.UserId
LEFT JOIN (
SELECT
 ppd.PortalID propPortalId,
 up.UserID,
 up.Visibility,
 f.*
FROM {databaseOwner}{objectQualifier}UserProfile up
 INNER JOIN {databaseOwner}{objectQualifier}ProfilePropertyDefinition ppd ON ppd.PropertyDefinitionID=up.PropertyDefinitionID
 INNER JOIN {databaseOwner}{objectQualifier}Files f ON up.PropertyValue=f.FileId
WHERE ppd.PropertyName='Photo'
) propPhoto ON propPhoto.propPortalId=c.PortalId AND propPhoto.UserID=u.UserID
LEFT JOIN (
SELECT
 ppd.PortalID,
 up.*
FROM {databaseOwner}{objectQualifier}UserProfile up
 INNER JOIN {databaseOwner}{objectQualifier}ProfilePropertyDefinition ppd ON ppd.PropertyDefinitionID=up.PropertyDefinitionID
WHERE ppd.PropertyName='Biography'
) propBio ON propBio.PortalID=c.PortalId AND propBio.UserID=u.UserID
 LEFT JOIN {databaseOwner}{objectQualifier}Users uc ON uc.UserID=s.CreatedByUserID
 LEFT JOIN {databaseOwner}{objectQualifier}Users um ON um.UserID=s.LastModifiedByUserID
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Conference_Tags'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Tags
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Tags
AS
SELECT
 t.*,
 (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Connect_Conference_SessionTags st 
    INNER JOIN {databaseOwner}{objectQualifier}Connect_Conference_Sessions s ON s.SessionId=st.SessionId WHERE st.TagId=t.TagId AND s.[Status] >= 3) NrSessions,
 (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Connect_Conference_TagVotes tv WHERE tv.TagId=t.TagId) NrVotes,
 uc.DisplayName CreatedByUser,
 um.DisplayName LastModifiedByUser
FROM {databaseOwner}{objectQualifier}Connect_Conference_Tags t
 LEFT JOIN {databaseOwner}{objectQualifier}Users uc ON uc.UserID=t.CreatedByUserID
 LEFT JOIN {databaseOwner}{objectQualifier}Users um ON um.UserID=t.LastModifiedByUserID
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Connect_Conference_Tracks'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Tracks
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Connect_Conference_Tracks
AS
SELECT
 t.*,
 uc.DisplayName CreatedByUser,
 um.DisplayName LastModifiedByUser,
 (SELECT COUNT(s.SessionId) FROM {databaseOwner}{objectQualifier}Connect_Conference_Sessions s WHERE s.TrackId=t.TrackId) NrSessions
FROM {databaseOwner}{objectQualifier}Connect_Conference_Tracks t
 LEFT JOIN {databaseOwner}{objectQualifier}Users uc ON uc.UserID=t.CreatedByUserID
 LEFT JOIN {databaseOwner}{objectQualifier}Users um ON um.UserID=t.LastModifiedByUserID
GO

/******* FUNCTIONS *******/
/******* SPROCS *******/
